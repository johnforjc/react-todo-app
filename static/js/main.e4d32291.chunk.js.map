{"version":3,"sources":["component/Form.js","component/Button.js","component/Header.js","component/Task.js","component/Tasks.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addTask","useState","text","setText","day","setDay","reminder","setReminder","className","onSubmit","e","preventDefault","htmlFor","type","value","onChange","target","checked","currentTarget","Button","btnText","color","onClick","style","backgroundColor","defaultProps","Header","title","toogleButton","showAddTask","Task","task","onDeleteTask","addReminder","cursor","marginRight","id","Tasks","tasks","map","App","setShowAddTask","setTasks","newId","Math","floor","random","newTask","length","console","log","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4d32291.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst Form = ({ addTask }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [day, setDay] = useState(\"\");\r\n  const [reminder, setReminder] = useState(false);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    addTask({ text, day, reminder });\r\n\r\n    // reset form\r\n    setText(\"\");\r\n    setDay(\"\");\r\n    setReminder(false);\r\n  };\r\n\r\n  return (\r\n    <form className=\"add-form\" onSubmit={onSubmit}>\r\n      <div className=\"form-control\">\r\n        <label htmlFor=\"text\">Name of Task</label>\r\n        <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\r\n      </div>\r\n      <div className=\"form-control\">\r\n        <label htmlFor=\"day\">Date of Task</label>\r\n        <input type=\"text\" value={day} onChange={(e) => setDay(e.target.value)} />\r\n      </div>\r\n      <div className=\"form-control-check\">\r\n        <label htmlFor=\"reminder\">Set Reminder</label>\r\n        <input type=\"checkbox\" checked={reminder} onChange={(e) => setReminder(e.currentTarget.checked)} />\r\n      </div>\r\n      <input type=\"submit\" value=\"Submit\" className=\"btn btn-block\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import propTypes from 'prop-types'\r\n\r\n\r\nconst Button = ({btnText, color, onClick}) => {\r\n    return (\r\n        <button onClick={onClick} className=\"btn\" style={{backgroundColor: color}}>\r\n            {btnText}\r\n        </button>\r\n    )\r\n}\r\n\r\nButton.defaultProps = \r\n{\r\n    color : 'steelblue'\r\n}\r\n\r\nButton.propTypes = \r\n{\r\n    color : propTypes.string\r\n}\r\n\r\nexport default Button\r\n","import propTypes from \"prop-types\";\r\nimport Button from \"./Button\";\r\n\r\nconst Header = ({ title, toogleButton, showAddTask }) => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>{title}</h1>\r\n\r\n      <Button btnText={`${!showAddTask ? \"Add\" : \"Close\"}`} color={`${!showAddTask ? \"green\" : \"red\"}`} onClick={() => toogleButton()} />\r\n\r\n      {/* Inline CSS JSX\r\n            <h1 style={{color : 'red'}}>{title}</h1> */}\r\n\r\n      {/* CSS in JS\r\n            <h1 style={headingStyle}>Task Tracker</h1> */}\r\n    </header>\r\n  );\r\n};\r\n\r\n// Default props\r\nHeader.defaultProps = {\r\n  title: \"Task Tracker\",\r\n};\r\n\r\n// PropTypes\r\nHeader.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n};\r\n\r\n// CSS in JSX\r\n// const headingStyle =\r\n// {\r\n//     color : 'blue'\r\n// }\r\n\r\nexport default Header;\r\n","import { FaTimes, FaBell, FaBellSlash } from \"react-icons/fa\";\r\n\r\n// onClick={() => addReminder(task.id)}\r\n\r\nconst Task = ({ task, onDeleteTask, addReminder }) => {\r\n  return (\r\n    <div className={`task ${task.reminder ? \"reminder\" : \"\"}`}>\r\n      <h3>\r\n        {task.text}{\" \"}\r\n        <div className=\"iconAction\">\r\n          {task.reminder ? (\r\n            <FaBell\r\n              style={{\r\n                color: \"blue\",\r\n                cursor: \"pointer\",\r\n                marginRight: \"10px\",\r\n              }}\r\n              onClick={() => addReminder(task.id)}\r\n            ></FaBell>\r\n          ) : (\r\n            <FaBellSlash\r\n              style={{\r\n                color: \"blue\",\r\n                cursor: \"pointer\",\r\n                marginRight: \"10px\",\r\n              }}\r\n              onClick={() => addReminder(task.id)}\r\n            ></FaBellSlash>\r\n          )}\r\n          <FaTimes\r\n            style={{\r\n              color: \"red\",\r\n              cursor: \"pointer\",\r\n            }}\r\n            onClick={() => onDeleteTask(task.id)}\r\n          ></FaTimes>\r\n        </div>\r\n      </h3>\r\n      <p>{task.day}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import Task from \"./Task\";\r\n\r\nconst Tasks = ({ tasks, onDeleteTask, addReminder }) => {\r\n  return (\r\n    <>\r\n      {tasks.map((task) => (\r\n        <Task key={task.id} task={task} onDeleteTask={onDeleteTask} addReminder={addReminder}></Task>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import { useState } from \"react\";\nimport Form from \"./component/Form\";\nimport Header from \"./component/Header\";\nimport Tasks from \"./component/Tasks\";\n\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([\n    {\n      id: 1,\n      text: \"Doctors Appointment\",\n      day: \"Feb 5th at 2:30pm\",\n      reminder: true,\n    },\n    {\n      id: 2,\n      text: \"Meeting at School\",\n      day: \"Feb 6th at 1:30pm\",\n      reminder: true,\n    },\n  ]);\n\n  const addTask = (task) => {\n    const newId = Math.floor(Math.random() * 100000) + 1;\n    const newTask = { id: newId, ...task };\n    setTasks([...tasks, newTask]);\n  };\n\n  const onDeleteTask = (id) => {\n    console.log(\"deleted\", id);\n    setTasks(tasks.filter((task) => task.id != id));\n  };\n\n  const addReminder = (id) => {\n    console.log(\"reminder\", id);\n    setTasks(tasks.map((task) => (task.id == id ? { ...task, reminder: !task.reminder } : task)));\n  };\n\n  const toogleButton = () => {\n    setShowAddTask(!showAddTask);\n  };\n\n  return (\n    <div className=\"container\">\n      <Header title=\"Task Tracker\" toogleButton={toogleButton} showAddTask={showAddTask}></Header>\n      {showAddTask && <Form addTask={addTask}></Form>}\n      {tasks.length > 0 ? <Tasks tasks={tasks} onDeleteTask={onDeleteTask} addReminder={addReminder}></Tasks> : \"No task to show\"}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}